// Generated by gencpp from file comm/msgRequest.msg
// DO NOT EDIT!


#ifndef COMM_MESSAGE_MSGREQUEST_H
#define COMM_MESSAGE_MSGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace comm
{
template <class ContainerAllocator>
struct msgRequest_
{
  typedef msgRequest_<ContainerAllocator> Type;

  msgRequest_()
    : msgtext()  {
    }
  msgRequest_(const ContainerAllocator& _alloc)
    : msgtext(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msgtext_type;
  _msgtext_type msgtext;





  typedef boost::shared_ptr< ::comm::msgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comm::msgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct msgRequest_

typedef ::comm::msgRequest_<std::allocator<void> > msgRequest;

typedef boost::shared_ptr< ::comm::msgRequest > msgRequestPtr;
typedef boost::shared_ptr< ::comm::msgRequest const> msgRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comm::msgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comm::msgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comm::msgRequest_<ContainerAllocator1> & lhs, const ::comm::msgRequest_<ContainerAllocator2> & rhs)
{
  return lhs.msgtext == rhs.msgtext;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comm::msgRequest_<ContainerAllocator1> & lhs, const ::comm::msgRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::comm::msgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm::msgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm::msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm::msgRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm::msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm::msgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comm::msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf820a8e464d1831c7daa93d2905b133";
  }

  static const char* value(const ::comm::msgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf820a8e464d1831ULL;
  static const uint64_t static_value2 = 0xc7daa93d2905b133ULL;
};

template<class ContainerAllocator>
struct DataType< ::comm::msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm/msgRequest";
  }

  static const char* value(const ::comm::msgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comm::msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string msgtext\n"
;
  }

  static const char* value(const ::comm::msgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comm::msgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgtext);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comm::msgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comm::msgRequest_<ContainerAllocator>& v)
  {
    s << indent << "msgtext: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msgtext);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMM_MESSAGE_MSGREQUEST_H
